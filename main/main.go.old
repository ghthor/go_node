package main

import (
	"fmt"
	"runtime"
	"ghthor/node"
)

func main() {

	runtime.GOMAXPROCS(2)

	conn1 := (new(NodeConn).Init()).(*NodeConn)
	conn2 := (new(NodeConn).Init()).(*NodeConn)

	node1 := &Node{name:"Begin"}
	node2 := &Node{name:"Mid"}
	node3 := &Node{name:"End"}

	node1.Init()
	node2.Init()
	node3.Init()

	node1.connect(nil, conn1)
	node2.connect(conn1, conn2)
	node3.connect(conn2, nil)

	node1.openProxyEndPt(node1.next)
	node2.openProxy(node2.prev, node2.next)
	node2.openProxy(node2.next, node2.prev)
	node3.openProxyEndPt(node3.prev)

	//go func() {
	go func() {
		node1.dropMsg("Dropped in Node1", node1.next)
	}()

	go func() {
		node3.dropMsg("Dropped in Node3", node3.prev)
	}()

	go func() {
		msg := &ShutdownMsg{Msg:Msg{propagate:true},from:node1, complete:make(chan string)}
		node1.dropMsg(*msg, node1.next)
		nodeName := <-msg.complete
		ChanPrintln <- fmt.Sprint("Shutdown Completed, ended on >", nodeName)
		close(ChanPrintln)
	}()

	fmt.Printf("\n\n");

	Dump()
	conn1.Close()
	conn2.Close()

	fmt.Printf("\n\n");
}
